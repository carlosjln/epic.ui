	// COPY
	tools.copy = ( function( merge_objects ) {

		function copy() {
			return new dsl( arguments );
		}

		function dsl( objects ) {
			this.objects = objects;
		}

		// COPIES OR OVERRIDES ALL PROPERTIES
		dsl.prototype.into = function( target ) {
			merge_objects( this.objects, target );
		};

		// ONLY COPIES PROPERTIES THAT ARE NOT DEFINED IN TARGET OBJECT
		dsl.prototype.into_undefined = function( target ) {
			var objects = this.objects;
			var length = objects.length;
			var source;

			for( var i = 0; i < length; i++ ) {
				source = objects[ i ];

				for( var attribute in source ) {
					if( target[ attribute ] === undefined ) {
						target[ attribute ] = source[ attribute ];
					}
				}
			}
		};

		return copy;
	} )( tools.merge.objects );


	// CLONE
	tools.clone = ( function() {

		function clone( object, target ) {
			var object_type = epic.type( object );
			var copy;

			switch( object_type ) {
				case "object":
					copy = target || {};
					
					for( var attribute in object ) {
						if( object.hasOwnProperty( attribute ) ) {
							copy[ attribute ] = clone( object[ attribute ], null );
						}
					}
					
					break;
					
				case "array":
					copy = target || [];
					
					for( var i = 0, len = object.length; i < len; i++ ) {
						copy[ i ] = clone( object[ i ], null );
					}
					
					break;
					
				case "date":
					copy = new Date();
					copy.setTime( object.getTime() );
					break;
					
				case "null":
				case "numeric":
				case "string":
				case "function":
					copy = object;
					break;
					
				default:
					copy = undefined;
					epic.fail( "Unable to copy. Object type [" + object_type + "] isn't supported." );
			}

			return copy;
		}

		return clone;
	} )();